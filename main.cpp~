#include <fstream>
#include <cstdlib>
#include <vector>
#include <boost/algorithm/string.hpp>
#include "graph.hpp"

int main(int argc, char** argv)
{
  std::fstream f;
  std::string line;
  f.open(/*"tsp_test.txt"*/argv[1]);
  std::vector<std::string> strs;
  getline(f,line);
  boost::split(strs,line,boost::is_any_of("\t "));
  int n = atoi(strs[0].c_str());
  Graph::Graph* g = new Graph::Graph(n);
  while(getline(f,line))
    {
      boost::split(strs,line,boost::is_any_of("\t "));
      g->addEdge(atoi(strs[0].c_str())-1,atoi(strs[1].c_str())-1,atoi(strs[2].c_str()));

    }
  /*  int min;
  try{
    min = g->SSP();
    std::cout<<"ans is "<< min<<std::endl;
  }
  catch(Graph::Exception& e)
    {
      std::cout<<"exception: "<<e.what()<<std::endl;
    }
  
  */
  std::vector<std::vector<Graph::Vertex*> >paths = g->TSPEuclidRec(g->getVertex(1));
  int num = 1;

  for(std::vector<std::vector <Graph::Vertex*> >::iterator i = paths.begin(); i!=paths.end(); ++i)
    {
      std::cout<<"path number "<<num<<std::endl;
      for(std::vector<Graph::Vertex*>::iterator j = (*i).begin();j!=(*i).end();++j)
	{
	  std::cout<<"->"<<(*j)->getName();
	}

      num++;
      std::cout<<std::endl<<std::endl;
    }
  f.close();
  return 0;
}
